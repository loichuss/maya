#
#   Script create by Loic Huss
#   Version 1.0
#   Last Modification 21 nov 2011
#
#   shapes definition
#

import pymel.core as pmc
import common.various as various
import clean

def final(func):
    def wrapper(*args, **kwargs):
        # check kwargs
        if ('name' in kwargs.keys())==False:
            kwargs['name'] = func.__name__
        if ('color' in kwargs.keys())==False:
            kwargs['color'] = 0
        if ('parent' in kwargs.keys())==False:
            kwargs['parent'] = None
        
        # call function
        obj = func(name=kwargs['name'])
        
        # change attributs
        obj.getShape().overrideEnabled.set(1)
        obj.getShape().overrideColor.set(kwargs['color'])
        clean.__lockHideTransform__(obj, channel=['v'])
        
        # set parent if one was given
        if kwargs['parent']:
            father = various.checkObj(kwargs['parent'], type=['transform', 'joint'])
            if father:
                obj.setParent(father)
                obj.setTransformation([[1,0,0,0], [0,1,0,0], [0,0,1,0], [0,0,0,1]])
            
        return obj
    return wrapper




@final
def cubeCenter(*args, **kwargs):
    # cube with pivot at the center
    points = [(-0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, -0.5, 0.5), (0.5, -0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def cube(*args, **kwargs):
    # cube
    points = [(0.0, 0.5, -0.5), (0.0, -0.5, -0.5), (0.0, -0.5, 0.5), (0.0, 0.5, 0.5), (1.0, 0.5, 0.5), (1.0, -0.5, 0.5), (1.0, -0.5, -0.5), (1.0, 0.5, -0.5), (0.0, 0.5, -0.5), (0.0, 0.5, 0.5), (1.0, 0.5, 0.5), (1.0, 0.5, -0.5), (1.0, -0.5, -0.5), (0.0, -0.5, -0.5), (0.0, -0.5, 0.5), (1.0, -0.5, 0.5)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def cubeCircle(*args, **kwargs):
    # cube with circle
    points = [(0.0, 0.5, -0.5), (0.0, -0.5, -0.5), (0.0, -0.5, 0.5), (0.0, 0.5, 0.5), (1.0, 0.5, 0.5), (1.0, -0.5, 0.5), (1.0, -0.5, -0.5), (1.0, 0.5, -0.5), (0.0, 0.5, -0.5), (0.0, 0.5, 0.5), (1.0, 0.5, 0.5), (1.0, 0.5, -0.5), (1.0, -0.5, -0.5), (0.0, -0.5, -0.5), (0.0, -0.5, 0.5), (1.0, -0.5, 0.5)]
    points.extend( [(0.5,-0.5, 0.5), (0.5, 0.0, 0.7), (0.5, 0.5, 0.5), (0.5, 0.7, 0), (0.5, 0.5, -0.5), (0.5, 0, -0.7), (0.5, -0.5, -0.5), (0.5, -0.7, 0), (0.5,-0.5, 0.5)] )
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def squarre(*args, **kwargs):
    # squarre
    points = [(1.0, 0.0, 1.0), (1.0, 0.0, -1.0), (-1.0, 0.0, -1.0), (-1.0, 0.0, 1.0), (1.0, 0.0, 1.0)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def squarreX(*args, **kwargs):
    # squarre x orient
    points = [(0.0, 1.0, 1.0), (0.0, 1.0, -1.0), (0.0, -1.0, -1.0), (0.0, -1.0, 1.0), (0.0, 1.0, 1.0)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def triangle(*args, **kwargs):
    # triangle y orient
    return pmc.circle( name=kwargs['name'], normal=(0, 1, 0), center=(0, 0, 0), sections=3, degree=1, constructionHistory=False )[0]


@final
def triangleX(*args, **kwargs):
    # triangle y orient
    return pmc.circle( name=kwargs['name'], normal=(1, 0, 0), center=(0, 0, 0), sections=3, degree=1, constructionHistory=False )[0]



@final
def circle(*args, **kwargs):
    # circle y orient
    return pmc.circle( name=kwargs['name'], normal=(0, 1, 0), center=(0, 0, 0), sections=25, degree=1, constructionHistory=False )[0]


@final
def circleX(*args, **kwargs):
    # circle y orient
    return pmc.circle( name=kwargs['name'], normal=(1, 0, 0), center=(0, 0, 0), sections=25, degree=1, constructionHistory=False )[0]


@final
def loc(*args, **kwargs):
    # locator
    points = [(0.0, 1.0, 0.0), (0.0, -1.0, 0.0), (0.0, 0.0, 0.0), (1.0, 0.0, 0.0), (-1.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 1.0), (0.0, 0.0, -1.0)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def rhombus(*args, **kwargs):
    # rhombus y orient
    points = [(-1.0, 0.0, 0.0), (0.0, 0.0, 1.0), (1.0, 0.0, 0.0), (0.0, 0.0, -1.0), (-1.0, 0.0, 0.0)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def rhombusX(*args, **kwargs):
    # rhombusX x orient
    points = [(0.0, 0.0, -1.0), (0.0, 1.0, 0.0), (0.0, 0.0, 1.0), (0.0, -1.0, 0.0), (0.0, 0.0, -1.0)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def diamond(*args, **kwargs):
    # cdiamond
    points = [(0.7, 0, 0.7), (0.7, 0, -0.7), (-0.7, 0, -0.7), (-0.7, 0, 0.7), (0.7, 0, 0.7), (0, 1, 0), (-0.7, 0, -0.7), (0, -1, 0), (0.7, 0, 0.7), (0.7, 0, -0.7), (0, 1, 0), (-0.7, 0, 0.7), (0, -1, 0), (0.7, 0, -0.7)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def star(*args, **kwargs):
    # star
    points = [(-0.5, 0, 0), (-1, 0, 1), (0, 0, 0.5), (1, 0, 1), (0.5, 0, 0), (1, 0, -1), (0, 0, -0.5), (-1, 0, -1), (-0.5, 0, 0)]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def starX(*args, **kwargs):
    # star X
    points = [(0, 0.5, 0), (0, 1, 1), (0, 0, 0.5), (0, -1, 1), (0, -0.5, 0), (0, -1, -1), (0, 0, -0.5), (0, 1, -1), (0, 0.5, 0) ]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def circleSpike(*args, **kwargs):
    # circle with 4 spikes
    
    points = [(0.195, 0, -1.487), (0, 0, -1.7), (0, 0, -1.7), (-0.195, 0, -1.487), (-0.195, 0, -1.487)]
    points.extend( [(-0.6, 0, -1.42), (-1.1, 0, -1.1), (-1.42, 0, -0.6)] )
    points.extend( [(-1.487, 0, -0.195), (-1.487, 0, -0.195), (-1.7, 0, 0), (-1.7, 0, 0), (-1.487, 0, 0.195), (-1.487, 0, 0.195)] )
    points.extend( [(-1.42, 0, 0.6), (-1.1, 0, 1.1), (-0.6, 0, 1.42)] )
    points.extend( [(-0.195, 0, 1.487), (-0.195, 0, 1.487), (0, 0, 1.7), (0, 0, 1.7), (0.195, 0, 1.487), (0.195, 0, 1.487)] )
    points.extend( [(0.6, 0, 1.42), (1.1, 0, 1.1), (1.42, 0, 0.6)] )
    points.extend( [(1.487, 0, 0.195), (1.487, 0, 0.195), (1.7, 0, 0), (1.7, 0, 0), (1.487, 0, -0.195), (1.487, 0, -0.195)] )
    points.extend( [(1.42, 0, -0.6), (1.1, 0, -1.1), (0.6, 0, -1.42), (0.195, 0, -1.487)] )
    
    return pmc.curve(name=kwargs['name'], degree=2, point=points)
    


@final
def fourArrows(*args, **kwargs):
    # circle with 4 arrows
    points = [(0.21, 0, -0.64), (0.16, 0, -0.9), (0.26, 0, -0.9), (0, 0, -1.51), (-0.26, 0, -0.9), (-0.16, 0, -0.9), (-0.21, 0, -0.64)]
    points.extend( [(-0.64, 0, -0.21), (-0.9, 0, -0.16), (-0.9, 0, -0.26), (-1.51, 0, 0), (-0.9, 0, 0.26), (-0.9, 0, 0.16), (-0.64, 0, 0.21)] )
    points.extend( [(-0.21, 0, 0.64), (-0.16, 0, 0.9), (-0.26, 0, 0.9), (0, 0, 1.51), (0.26, 0, 0.9), (0.16, 0, 0.9), (0.21, 0, 0.64)] )
    points.extend( [(0.64, 0, 0.21), (0.9, 0, 0.16), (0.9, 0, 0.26), (1.51, 0, 0), (0.9, 0, -0.26), (0.9, 0, -0.16), (0.64, 0, -0.21), (0.21, 0, -0.64)] )
    
    return pmc.curve(name=kwargs['name'], degree=1, point=points)
    

@final
def spike(*args, **kwargs):
    # spike
    points = [(0, 0, -1), (-0.09, 0, -0.47), (-0.47, 0, -0.09), (-1, 0, 0)]
    points.extend( [(-1, 0 , 0), (-0.47, 0, 0.09 ), (-0.09, 0, 0.47), (0, 0, 1)] )
    points.extend( [(0, 0, 1), (0.09, 0, 0.47), (0.47, 0, 0.09), (1, 0, 0)] )
    points.extend( [(1, 0, 0), (0.47, 0, -0.09 ), (0.09, 0, -0.47), (0, 0, -1)] )
    
    return pmc.curve(name=kwargs['name'], degree=2, point=points)


@final
def spikeX(*args, **kwargs):
    # spike X
    points = [(0, 0, -1), (0, -0.09, -0.47), (0, -0.47, -0.09), (0, -1, 0)]
    points.extend( [(0, -1, 0), (0, -0.47, 0.09 ), (0, -0.09, 0.47), (0, 0, 1)] )
    points.extend( [(0, 0, 1), (0, 0.09, 0.47), (0, 0.47, 0.09), (0, 1, 0)] )
    points.extend( [(0, 1, 0), (0, 0.47, -0.09 ), (0, 0.09, -0.47), (0, 0, -1)] )
    
    return pmc.curve(name=kwargs['name'], degree=2, point=points)


@final
def diamondSpike(*args, **kwargs):
    # spikes
    points = [(0, 0, -1), (0, 0, -1), (0, -0.09, -0.47), (0, -0.47, -0.09), (0, -1, 0)]
    points.extend( [(0, -1, 0), (0, -0.47, 0.09 ), (0, -0.09, 0.47), (0, 0, 1)] )
    points.extend( [(0, 0, 1), (0, 0.09, 0.47), (0, 0.47, 0.09), (0, 1, 0)] )
    points.extend( [(0, 1, 0), (0, 0.47, -0.09 ), (0, 0.09, -0.47), (0, 0, -1)] )
    
    points.extend( [(0, 0, -1), (-0.09, 0, -0.47), (-0.47, 0, -0.09), (-1, 0, 0)] )
    points.extend( [(-1, 0 , 0), (-0.47, 0, 0.09 ), (-0.09, 0, 0.47), (0, 0, 1)] )
    points.extend( [(0, 0, 1), (0.09, 0, 0.47), (0.47, 0, 0.09), (1, 0, 0)] )
    points.extend( [(1, 0, 0), (0.47, 0, -0.09 ), (0.09, 0, -0.47), (0, 0, -1)] )
    
    points.extend( [(0, 0, -1), (0, -0.09, -0.47), (0, -0.47, -0.09), (0, -1, 0)] )
    
    points.extend( [(0, -1, 0), (0.09, -0.47, 0), (0.47, -0.09, 0), (1, 0, 0)] )
    points.extend( [(1, 0, 0), (0.47, 0.09, 0), (0.09, 0.47, 0), (0, 1, 0)] )
    points.extend( [(0, 1, 0), (-0.09, 0.47, 0), (-0.47, 0.09, 0), (-1, 0, 0)] )
    points.extend( [(-1, 0, 0), (-0.47, -0.09, 0), (-0.09, -0.47, 0), (0, -1, 0)] )
    return pmc.curve(name=kwargs['name'], degree=2, point=points)


@final
def donut(*args, **kwargs):
    # donut
    points = [(-0.922941510092, -0.124817932752, 0.0), (-0.923334416564, -0.124657201114, 0.0), (-0.924301660636, -0.124260513838, 0.0), (-0.952690626548, -0.107049637238, 0.0), (-1.00044938006, -0.053992118225, 0.0), (-1.00130807405, 8.58465351032e-16, 0.0), (-1.00130817792, 8.58465351032e-16, 0.0), (-1.00130810508, 8.58465351032e-16, 0.0), (-0.975748863255, 8.58465351032e-16, 0.254373521139), (-0.871499504623, 8.58465351032e-16, 0.506872700908), (-0.708710687083, 8.58465351032e-16, 0.706417112583), (-0.708710424692, 8.58465351032e-16, 0.706417458915), (-0.708710340362, 8.58465351032e-16, 0.706417374585), (-0.70783361471, 0.0546763739925, 0.705546584342), (-0.673991934537, 0.10748924321, 0.671704904169), (-0.653322931282, 0.124660945142, 0.651026652886), (-0.653304352198, 0.124671850372, 0.651008073802), (-0.653303915058, 0.124671886259, 0.651008743199), (-0.470492116282, 0.124819947097, 0.80017122337), (-0.23931354535, 0.124819947097, 0.8962230411), (0.0, 0.124667369497, 0.921052857666), (0.0, 0.124667369497, 0.92105291117), (0.0, 0.124667369497, 0.921052857666), (-0.23931354535, 0.124819947097, 0.8962230411), (-0.470492116282, 0.124819947097, 0.80017122337), (-0.653303915058, 0.124671886259, 0.651008743199), (-0.653304540917, 0.124671886259, 0.651008262521), (-0.653305218887, 0.124671886259, 0.651007150561), (-0.803595042342, 0.124819947097, 0.466073005625), (-0.899144085852, 0.124819947097, 0.234686178793), (-0.923314812641, 0.12466739889, 0.0), (-0.923314831092, 0.12466739889, 0.0), (-0.923314775939, 0.12466739889, 0.0), (-0.898440308352, 0.124819947097, -0.237096274409), (-0.802388490622, 0.124819947097, -0.46827484534), (-0.653272647875, 0.124668575726, -0.651039919171), (-0.653272237922, 0.124668575726, -0.651040386448), (-0.653272647875, 0.124668575726, -0.651039919171), (-0.802388490622, 0.124819947097, -0.46827484534), (-0.898440308352, 0.124819947097, -0.237096274409), (-0.923314775939, 0.12466739889, 0.0), (-0.923314783125, 0.12466739244, 0.0), (-0.923319505329, 0.124665432511, 0.0), (-0.952213880508, 0.10748924321, 0.0), (-1.00007324358, 0.0546763739925, 0.0), (-1.00130787818, 8.58465351032e-16, 0.0), (-1.00130817792, 8.58465351032e-16, 0.0), (-1.00130802874, 8.58465351032e-16, 0.0), (-0.975305755308, 8.58465351032e-16, -0.256262238956), (-0.870477301473, 8.58465351032e-16, -0.508521549638), (-0.70868373521, 8.58465351032e-16, -0.706444101083), (-0.708683383858, 8.58465351032e-16, -0.706444488638), (-0.708683358044, 8.58465351032e-16, -0.706444462824), (-0.70808148368, -0.053992118225, -0.705830648853), (-0.674310945212, -0.107049637238, -0.672060110385), (-0.653297426599, -0.124533795326, -0.65105854818), (-0.653275421994, -0.124546642438, -0.651036543575), (-0.653274248162, -0.124546665609, -0.651037698712), (-0.468652887192, -0.124819947097, -0.801012071032), (-0.237226927903, -0.124819947097, -0.896668113628), (0.0, -0.124547517029, -0.921345527026), (0.0, -0.124547517029, -0.921345634737), (0.0, -0.124547517029, -0.921345424649), (0.234364010905, -0.124819947097, -0.896220855242), (0.465645912442, -0.124819947097, -0.800217026466), (0.648753134867, -0.124545779271, -0.65103494931), (0.648753572051, -0.124545779271, -0.651034628123), (0.648753134867, -0.124545779271, -0.65103494931), (0.465645912442, -0.124819947097, -0.800217026466), (0.234364010905, -0.124819947097, -0.896220855242), (0.0, -0.124547517029, -0.921345424649), (0.0, -0.124547490793, -0.921345439617), (0.0, -0.124532943905, -0.921380676146), (0.0, -0.107049637238, -0.950428633757), (0.0, -0.053992118225, -0.998187387266), (0.0, 8.58465351032e-16, -0.999046081592), (0.0, 8.58465351032e-16, -0.999046186214), (0.0, 8.58465351032e-16, -0.999046112849), (-0.256590788391, 8.58465351032e-16, -0.973531592315), (-0.50908996816, 8.58465351032e-16, -0.869282233681), (-0.70868280698, 8.58465351032e-16, -0.706444991367), (-0.708683383858, 8.58465351032e-16, -0.706444488638), (-0.708683309366, 8.58465351032e-16, -0.706444414146), (-0.707815515027, 0.0546763739925, -0.705564680201), (-0.673973834855, 0.10748924321, -0.671723000028), (-0.653279499273, 0.124664255676, -0.651047647799), (-0.653272163407, 0.124668561556, -0.651040311933), (-0.653271442741, 0.124668575726, -0.65104101027), (-0.468290272877, 0.124819947097, -0.801377771401), (-0.236903446045, 0.124819947097, -0.89692681491), (0.0, 0.124668587353, -0.92105000581), (0.0, 0.124668587353, -0.921050046563), (0.0, 0.124668587353, -0.921049924742), (0.234879007157, 0.124819947097, -0.896223037411), (0.466057578088, 0.124819947097, -0.800171219681), (0.648755069238, 0.124670398106, -0.651033564154), (0.648755524845, 0.124670398106, -0.651033214235), (0.648755069238, 0.124670398106, -0.651033564154), (0.466057578088, 0.124819947097, -0.800171219681), (0.234879007157, 0.124819947097, -0.896223037411), (0.0, 0.124668587353, -0.921049924742), (0.0, 0.124668573107, -0.921049940616), (0.0, 0.124664244048, -0.921060370944), (0.0, 0.10748924321, -0.949951887717), (0.0, 0.0546763739925, -0.997811250791), (0.0, 8.58465351032e-16, -0.999045884301), (0.0, 8.58465351032e-16, -0.999046186214), (0.0, 8.58465351032e-16, -0.999046035953), (0.254044971704, 8.58465351032e-16, -0.973088484366), (0.506304282386, 8.58465351032e-16, -0.868260030532), (0.704161151191, 8.58465351032e-16, -0.706442707733), (0.70416140006, 8.58465351032e-16, -0.706442503443), (0.704161368274, 8.58465351032e-16, -0.706442471657), (0.703550560203, -0.053992118225, -0.705837590572), (0.669780021736, -0.107049637238, -0.672067052104), (0.648772440806, -0.124534681664, -0.651053496878), (0.648753466985, -0.124545759291, -0.651034523057), (0.648753959023, -0.124545779271, -0.6510340149), (0.79879480378, -0.124819947097, -0.466435616251), (0.894450846376, -0.124819947097, -0.235009656961), (0.919061360931, -0.124556738715, 0.0), (0.919061604957, -0.124556738715, 0.0), (0.919061128988, -0.124556738715, 0.0), (0.89400358799, -0.124819947097, 0.236581281846), (0.797999759214, -0.124819947097, 0.467863183383), (0.648762826452, -0.124542342063, 0.6510252274), (0.6487625588, -0.124542342063, 0.651025539195), (0.648762826452, -0.124542342063, 0.6510252274), (0.797999759214, -0.124819947097, 0.467863183383), (0.89400358799, -0.124819947097, 0.236581281846), (0.919061128988, -0.124556738715, 0.0), (0.919061162899, -0.124556679274, 0.0), (0.919140993873, -0.12452372222, 0.0), (0.94816664479, -0.107049637238, 0.0), (0.995925398299, -0.053992118225, 0.0), (0.996784140711, 8.58465351032e-16, 0.0), (0.99678435391, 8.58465351032e-16, 0.0), (0.996784204407, 8.58465351032e-16, 0.0), (0.971314325063, 8.58465351032e-16, -0.254373517449), (0.867064966429, 8.58465351032e-16, -0.506872697217), (0.704161685461, 8.58465351032e-16, -0.706442126739), (0.70416140006, 8.58465351032e-16, -0.706442503443), (0.704161308334, 8.58465351032e-16, -0.706442411717), (0.703284591551, 0.0546763739925, -0.705571621919), (0.669442911378, 0.10748924321, -0.671729941746), (0.648768912489, 0.124662433295, -0.651046601879), (0.648755387464, 0.124670371982, -0.651033076853), (0.648756018388, 0.124670398106, -0.651032404761), (0.799160504149, 0.124819947097, -0.466073001936), (0.894709547658, 0.124819947097, -0.234686175103), (0.918773920645, 0.12467454065, 0.0), (0.918774073116, 0.12467454065, 0.0), (0.918773617338, 0.12467454065, 0.0), (0.894005770159, 0.124819947097, 0.237096278098), (0.797953952429, 0.124819947097, 0.46827484903), (0.648759637625, 0.124667907335, 0.651028933844), (0.648759354527, 0.124667907335, 0.651029256528), (0.648759637625, 0.124667907335, 0.651028933844), (0.797953952429, 0.124819947097, 0.46827484903), (0.894005770159, 0.124819947097, 0.237096278098), (0.918773617338, 0.12467454065, 0.0), (0.918773676728, 0.12467448735, 0.0), (0.918812700414, 0.124658290751, 0.0), (0.94768989875, 0.10748924321, 0.0), (0.995549261824, 0.0546763739925, 0.0), (0.996783738671, 8.58465351032e-16, 0.0), (0.99678435391, 8.58465351032e-16, 0.0), (0.996784047708, 8.58465351032e-16, 0.0), (0.970871217114, 8.58465351032e-16, 0.256262242645), (0.86604276328, 8.58465351032e-16, 0.508521553327), (0.704171883505, 8.58465351032e-16, 0.706432014592), (0.704170796247, 8.58465351032e-16, 0.706433213882), (0.704170716366, 8.58465351032e-16, 0.706433134001), (0.703568659886, -0.053992118225, 0.705819494713), (0.669798121418, -0.107049637238, 0.672048956245), (0.6487697393, -0.124538118872, 0.651032719695), (0.648762518817, -0.12454233446, 0.651025499212), (0.648762133642, -0.124542342063, 0.651025878253), (0.464218348999, -0.124819947097, 0.801012074721), (0.232792389709, -0.124819947097, 0.896668117318), (0.0, -0.124547570578, 0.921345402071), (0.0, -0.124547570578, 0.921345510573), (0.0, -0.124547570578, 0.921345298941), (-0.238798549098, -0.124819947097, 0.896220858931), (-0.470080450635, -0.124819947097, 0.800217030156), (-0.653302411298, -0.124542368863, 0.651009624579), (-0.65330257978, -0.124542368863, 0.6510095008), (-0.653302411298, -0.124542368863, 0.651009624579), (-0.470080450635, -0.124819947097, 0.800217030156), (-0.238798549098, -0.124819947097, 0.896220858931), (0.0, -0.124547570578, 0.921345298941), (0.0, -0.124547544149, 0.92134531402), (0.0, -0.124532890356, 0.921380809502), (0.0, -0.107049637238, 0.950428637581), (0.0, -0.053992118225, 0.998187391091), (0.0, 8.58465351032e-16, 0.999046081653), (0.0, 8.58465351032e-16, 0.999046177779), (0.0, 8.58465351032e-16, 0.999046110372), (0.252156250197, 8.58465351032e-16, 0.973531596004), (0.504655429965, 8.58465351032e-16, 0.869282237371), (0.704169011097, 8.58465351032e-16, 0.706434769577), (0.704170796247, 8.58465351032e-16, 0.706433213882), (0.704170565731, 8.58465351032e-16, 0.706432983366), (0.703302691234, 0.0546763739925, 0.70555352606), (0.669461011061, 0.10748924321, 0.671711845888), (0.648764368949, 0.124664924067, 0.651034270951), (0.648759303069, 0.12466789755, 0.651029205071), (0.648758805404, 0.124667907335, 0.651029687317), (0.463855734684, 0.124819947097, 0.80137777509), (0.232468907851, 0.124819947097, 0.8969268186), (0.0, 0.124667369497, 0.921052893271), (0.0, 0.12466736324, 0.921052864638), (0.0, 0.124665461905, 0.921057445668), (0.0, 0.10748924321, 0.949951891541), (0.0, 0.0546763739925, 0.997811254615), (0.0, 8.58465351032e-16, 0.999045900384), (0.0, 8.58465351032e-16, 0.999046177779), (0.0, 8.58465351032e-16, 0.999046039721), (-0.258479509897, 8.58465351032e-16, 0.973088488056), (-0.510738820579, 8.58465351032e-16, 0.868260034221), (-0.708710195889, 8.58465351032e-16, 0.706417646734), (-0.708710424692, 8.58465351032e-16, 0.706417458915), (-0.708710395469, 8.58465351032e-16, 0.706417429692), (-0.708099583363, -0.053992118225, 0.705812552994), (-0.674329044895, -0.107049637238, 0.672042014527), (-0.653309851412, -0.124538092072, 0.651016772433), (-0.653302539289, -0.124542361163, 0.65100946031), (-0.653302728911, -0.124542368863, 0.651009264476), (-0.803229341973, -0.124819947097, 0.46643561994), (-0.89888538457, -0.124819947097, 0.235009660651), (-0.922952355792, -0.124819947097, 0.0), (-0.922956490595, -0.124819947097, 0.0), (-0.922948425742, -0.124819947097, 0.0), (-0.898438126183, -0.124819947097, -0.236581278157), (-0.802434297408, -0.124819947097, -0.467863179694), (-0.653276359518, -0.124546665609, -0.651035715222), (-0.653275543843, -0.124546665609, -0.651036665424), (-0.653276359518, -0.124546665609, -0.651035715222), (-0.802434297408, -0.124819947097, -0.467863179694), (-0.898438126183, -0.124819947097, -0.236581278157), (-0.922948425742, -0.124819947097, 0.0), (-0.922956490595, -0.124819947097, 0.0), (-0.922956490595, -0.124819947097, 0.0) ]
    return pmc.curve(name=kwargs['name'], degree=2, point=points)


@final
def donutX(*args, **kwargs):
    # donut X
    points = [(-0.124817932752, 0.922941510092, 0.0), (-0.124657201114, 0.923334416564, 0.0), (-0.124260513838, 0.924301660636, 0.0), (-0.107049637238, 0.952690626548, 0.0), (-0.053992118225, 1.00044938006, 0.0), (6.36130295321e-16, 1.00130807405, 0.0), (6.36130272258e-16, 1.00130817792, 0.0), (6.36130288431e-16, 1.00130810508, 0.0), (6.41805580184e-16, 0.975748863255, 0.254373521139), (6.64953587836e-16, 0.871499504623, 0.506872700908), (7.01099966513e-16, 0.708710687083, 0.706417112583), (7.01100024775e-16, 0.708710424692, 0.706417458915), (7.011000435e-16, 0.708710340362, 0.706417374585), (0.0546763739925, 0.70783361471, 0.705546584342), (0.10748924321, 0.673991934537, 0.671704904169), (0.124660945142, 0.653322931282, 0.651026652886), (0.124671850372, 0.653304352198, 0.651008073802), (0.124671886259, 0.653303915058, 0.651008743199), (0.124819947097, 0.470492116282, 0.80017122337), (0.124819947097, 0.23931354535, 0.8962230411), (0.124667369497, 2.7681716807e-17, 0.921052857666), (0.124667369497, 2.7681716807e-17, 0.92105291117), (0.124667369497, 2.7681716807e-17, 0.921052857666), (0.124819947097, 0.23931354535, 0.8962230411), (0.124819947097, 0.470492116282, 0.80017122337), (0.124671886259, 0.653303915058, 0.651008743199), (0.124671886259, 0.653304540917, 0.651008262521), (0.124671886259, 0.653305218887, 0.651007150561), (0.124819947097, 0.803595042342, 0.466073005625), (0.124819947097, 0.899144085852, 0.234686178793), (0.12466739889, 0.923314812641, 0.0), (0.12466739889, 0.923314831092, 0.0), (0.12466739889, 0.923314775939, 0.0), (0.124819947097, 0.898440308352, -0.237096274409), (0.124819947097, 0.802388490622, -0.46827484534), (0.124668575726, 0.653272647875, -0.651039919171), (0.124668575726, 0.653272237922, -0.651040386448), (0.124668575726, 0.653272647875, -0.651039919171), (0.124819947097, 0.802388490622, -0.46827484534), (0.124819947097, 0.898440308352, -0.237096274409), (0.12466739889, 0.923314775939, 0.0), (0.12466739244, 0.923314783125, 0.0), (0.124665432511, 0.923319505329, 0.0), (0.10748924321, 0.952213880508, 0.0), (0.0546763739925, 1.00007324358, 0.0), (6.36130338813e-16, 1.00130787818, 0.0), (6.36130272258e-16, 1.00130817792, 0.0), (6.36130305382e-16, 1.00130802874, 0.0), (6.41903969914e-16, 0.975305755308, -0.256262238956), (6.6518056253e-16, 0.870477301473, -0.508521549638), (7.01105951031e-16, 0.70868373521, -0.706444101083), (7.01106029046e-16, 0.708683383858, -0.706444488638), (7.01106034778e-16, 0.708683358044, -0.706444462824), (-0.053992118225, 0.70808148368, -0.705830648853), (-0.107049637238, 0.674310945212, -0.672060110385), (-0.124533795326, 0.653297426599, -0.65105854818), (-0.124546642438, 0.653275421994, -0.651036543575), (-0.124546665609, 0.653274248162, -0.651037698712), (-0.124819947097, 0.468652887192, -0.801012071032), (-0.124819947097, 0.237226927903, -0.896668113628), (-0.124547517029, -2.76551042131e-17, -0.921345527026), (-0.124547517029, -2.76551042131e-17, -0.921345634737), (-0.124547517029, -2.76551042131e-17, -0.921345424649), (-0.124819947097, -0.234364010905, -0.896220855242), (-0.124819947097, -0.465645912442, -0.800217026466), (-0.124545779271, -0.648753134867, -0.65103494931), (-0.124545779271, -0.648753572051, -0.651034628123), (-0.124545779271, -0.648753134867, -0.65103494931), (-0.124819947097, -0.465645912442, -0.800217026466), (-0.124819947097, -0.234364010905, -0.896220855242), (-0.124547517029, -2.76551042131e-17, -0.921345424649), (-0.124547490793, -2.76550983875e-17, -0.921345439617), (-0.124532943905, -2.76518683295e-17, -0.921380676146), (-0.107049637238, -2.37697944079e-17, -0.950428633757), (-0.053992118225, -1.19886585603e-17, -0.998187387266), (8.58465351032e-16, 1.90617599712e-31, -0.999046081592), (8.58465351032e-16, 1.90617599712e-31, -0.999046186214), (8.58465351032e-16, 1.90617599712e-31, -0.999046112849), (8.01490750796e-16, 0.256590788391, -0.973531592315), (7.45424670181e-16, 0.50908996816, -0.869282233681), (7.01106157139e-16, 0.70868280698, -0.706444991367), (7.01106029046e-16, 0.708683383858, -0.706444488638), (7.01106045587e-16, 0.708683309366, -0.706444414146), (0.0546763739925, 0.707815515027, -0.705564680201), (0.10748924321, 0.673973834855, -0.671723000028), (0.124664255676, 0.653279499273, -0.651047647799), (0.124668561556, 0.653272163407, -0.651040311933), (0.124668575726, 0.653271442741, -0.65104101027), (0.124819947097, 0.468290272877, -0.801377771401), (0.124819947097, 0.236903446045, -0.89692681491), (0.124668587353, 2.76819872254e-17, -0.92105000581), (0.124668587353, 2.76819872254e-17, -0.921050046563), (0.124668587353, 2.76819872254e-17, -0.921049924742), (0.124819947097, -0.234879007157, -0.896223037411), (0.124819947097, -0.466057578088, -0.800171219681), (0.124670398106, -0.648755069238, -0.651033564154), (0.124670398106, -0.648755524845, -0.651033214235), (0.124670398106, -0.648755069238, -0.651033564154), (0.124819947097, -0.466057578088, -0.800171219681), (0.124819947097, -0.234879007157, -0.896223037411), (0.124668587353, 2.76819872254e-17, -0.921049924742), (0.124668573107, 2.76819840621e-17, -0.921049940616), (0.124664244048, 2.76810228179e-17, -0.921060370944), (0.10748924321, 2.38674065423e-17, -0.949951887717), (0.0546763739925, 1.21405938619e-17, -0.997811250791), (8.58465351032e-16, 1.90617599712e-31, -0.999045884301), (8.58465351032e-16, 1.90617599712e-31, -0.999046186214), (8.58465351032e-16, 1.90617599712e-31, -0.999046035953), (9.14874666407e-16, -0.254044971704, -0.973088484366), (9.70887485386e-16, -0.506304282386, -0.868260030532), (1.01482053565e-15, -0.704161151191, -0.706442707733), (1.01482059091e-15, -0.70416140006, -0.706442503443), (1.01482058385e-15, -0.704161368274, -0.706442471657), (-0.053992118225, -0.703550560203, -0.705837590572), (-0.107049637238, -0.669780021736, -0.672067052104), (-0.124534681664, -0.648772440806, -0.651053496878), (-0.124545759291, -0.648753466985, -0.651034523057), (-0.124545779271, -0.648753959023, -0.6510340149), (-0.124819947097, -0.79879480378, -0.466435616251), (-0.124819947097, -0.894450846376, -0.235009656961), (-0.124556738715, -0.919061360931, 0.0), (-0.124556738715, -0.919061604957, 0.0), (-0.124556738715, -0.919061128988, 0.0), (-0.124819947097, -0.89400358799, 0.236581281846), (-0.124819947097, -0.797999759214, 0.467863183383), (-0.124542342063, -0.648762826452, 0.6510252274), (-0.124542342063, -0.6487625588, 0.651025539195), (-0.124542342063, -0.648762826452, 0.6510252274), (-0.124819947097, -0.797999759214, 0.467863183383), (-0.124819947097, -0.89400358799, 0.236581281846), (-0.124556738715, -0.919061128988, 0.0), (-0.124556679274, -0.919061162899, 0.0), (-0.12452372222, -0.919140993873, 0.0), (-0.107049637238, -0.94816664479, 0.0), (-0.053992118225, -0.995925398299, 0.0), (1.07979589175e-15, -0.996784140711, 0.0), (1.07979593909e-15, -0.99678435391, 0.0), (1.0797959059e-15, -0.996784204407, 0.0), (1.0741404566e-15, -0.971314325063, -0.254373517449), (1.05099244895e-15, -0.867064966429, -0.506872697217), (1.01482065428e-15, -0.704161685461, -0.706442126739), (1.01482059091e-15, -0.70416140006, -0.706442503443), (1.01482057054e-15, -0.704161308334, -0.706442411717), (0.0546763739925, -0.703284591551, -0.705571621919), (0.10748924321, -0.669442911378, -0.671729941746), (0.124662433295, -0.648768912489, -0.651046601879), (0.124670371982, -0.648755387464, -0.651033076853), (0.124670398106, -0.648756018388, -0.651032404761), (0.124819947097, -0.799160504149, -0.466073001936), (0.124819947097, -0.894709547658, -0.234686175103), (0.12467454065, -0.918773920645, 0.0), (0.12467454065, -0.918774073116, 0.0), (0.12467454065, -0.918773617338, 0.0), (0.124819947097, -0.894005770159, 0.237096278098), (0.124819947097, -0.797953952429, 0.46827484903), (0.124667907335, -0.648759637625, 0.651028933844), (0.124667907335, -0.648759354527, 0.651029256528), (0.124667907335, -0.648759637625, 0.651028933844), (0.124819947097, -0.797953952429, 0.46827484903), (0.124819947097, -0.894005770159, 0.237096278098), (0.12467454065, -0.918773617338, 0.0), (0.12467448735, -0.918773676728, 0.0), (0.124658290751, -0.918812700414, 0.0), (0.10748924321, -0.94768989875, 0.0), (0.0546763739925, -0.995549261824, 0.0), (1.07979580248e-15, -0.996783738671, 0.0), (1.07979593909e-15, -0.99678435391, 0.0), (1.0797958711e-15, -0.996784047708, 0.0), (1.07404206687e-15, -0.970871217114, 0.256262242645), (1.05076547425e-15, -0.86604276328, 0.508521553327), (1.0148229187e-15, -0.704171883505, 0.706432014592), (1.01482267728e-15, -0.704170796247, 0.706433213882), (1.01482265955e-15, -0.704170716366, 0.706433134001), (-0.053992118225, -0.703568659886, 0.705819494713), (-0.107049637238, -0.669798121418, 0.672048956245), (-0.124538118872, -0.6487697393, 0.651032719695), (-0.12454233446, -0.648762518817, 0.651025499212), (-0.124542342063, -0.648762133642, 0.651025878253), (-0.124819947097, -0.464218348999, 0.801012074721), (-0.124819947097, -0.232792389709, 0.896668117318), (-0.124547570578, -2.76551161034e-17, 0.921345402071), (-0.124547570578, -2.76551161034e-17, 0.921345510573), (-0.124547570578, -2.76551161034e-17, 0.921345298941), (-0.124819947097, 0.238798549098, 0.896220858931), (-0.124819947097, 0.470080450635, 0.800217030156), (-0.124542368863, 0.653302411298, 0.651009624579), (-0.124542368863, 0.65330257978, 0.6510095008), (-0.124542368863, 0.653302411298, 0.651009624579), (-0.124819947097, 0.470080450635, 0.800217030156), (-0.124819947097, 0.238798549098, 0.896220858931), (-0.124547570578, -2.76551161034e-17, 0.921345298941), (-0.124547544149, -2.76551102349e-17, 0.92134531402), (-0.124532890356, -2.76518564393e-17, 0.921380809502), (-0.107049637238, -2.37697944079e-17, 0.950428637581), (-0.053992118225, -1.19886585603e-17, 0.998187391091), (8.58465351032e-16, 1.90617599712e-31, 0.999046081653), (8.58465351032e-16, 1.90617599712e-31, 0.999046177779), (8.58465351032e-16, 1.90617599712e-31, 0.999046110372), (9.14455285986e-16, -0.252156250197, 0.973531596004), (9.70521366602e-16, -0.504655429965, 0.869282237371), (1.0148222809e-15, -0.704169011097, 0.706434769577), (1.01482267728e-15, -0.704170796247, 0.706433213882), (1.0148226261e-15, -0.704170565731, 0.706432983366), (0.0546763739925, -0.703302691234, 0.70555352606), (0.10748924321, -0.669461011061, 0.671711845888), (0.124664924067, -0.648764368949, 0.651034270951), (0.12466789755, -0.648759303069, 0.651029205071), (0.124667907335, -0.648758805404, 0.651029687317), (0.124819947097, -0.463855734684, 0.80137777509), (0.124819947097, -0.232468907851, 0.8969268186), (0.124667369497, 2.7681716807e-17, 0.921052893271), (0.12466736324, 2.76817154177e-17, 0.921052864638), (0.124665461905, 2.76812932365e-17, 0.921057445668), (0.10748924321, 2.38674065423e-17, 0.949951891541), (0.0546763739925, 1.21405938619e-17, 0.997811254615), (8.58465351032e-16, 1.90617599712e-31, 0.999045900384), (8.58465351032e-16, 1.90617599712e-31, 0.999046177779), (8.58465351032e-16, 1.90617599712e-31, 0.999046039721), (8.01071370376e-16, 0.258479509897, 0.973088488056), (7.45058551397e-16, 0.510738820579, 0.868260034221), (7.01100075579e-16, 0.708710195889, 0.706417646734), (7.01100024775e-16, 0.708710424692, 0.706417458915), (7.01100031264e-16, 0.708710395469, 0.706417429692), (-0.053992118225, 0.708099583363, 0.705812552994), (-0.107049637238, 0.674329044895, 0.672042014527), (-0.124538092072, 0.653309851412, 0.651016772433), (-0.124542361163, 0.653302539289, 0.65100946031), (-0.124542368863, 0.653302728911, 0.651009264476), (-0.124819947097, 0.803229341973, 0.46643561994), (-0.124819947097, 0.89888538457, 0.235009660651), (-0.124819947097, 0.922952355792, 0.0), (-0.124819947097, 0.922956490595, 0.0), (-0.124819947097, 0.922948425742, 0.0), (-0.124819947097, 0.898438126183, -0.236581278157), (-0.124819947097, 0.802434297408, -0.467863179694), (-0.124546665609, 0.653276359518, -0.651035715222), (-0.124546665609, 0.653275543843, -0.651036665424), (-0.124546665609, 0.653276359518, -0.651035715222), (-0.124819947097, 0.802434297408, -0.467863179694), (-0.124819947097, 0.898438126183, -0.236581278157), (-0.124819947097, 0.922948425742, 0.0), (-0.124819947097, 0.922956490595, 0.0), (-0.124819947097, 0.922956490595, 0.0) ]
    return pmc.curve(name=kwargs['name'], degree=2, point=points)


@final
def cylinder(*args, **kwargs):
    # cylinder
    points = [(1, 0.05, 0.0), (1, -0.05, 0.0), (0.97, -0.05, -0.25), (0.868, -0.05, -0.5), (0.7, -0.05, -0.7), (0.7, 0.05, -0.7), (0.5, 0.05, -0.868), (0.25, 0.05, -0.97), (0.0, 0.05, -1), (0.0, -0.05, -1), (-0.25, -0.05, -0.97), (-0.5, -0.05, -0.868), (-0.7, -0.05, -0.7), (-0.7, 0.05, -0.7), (-0.868, 0.05, -0.5), (-0.97, 0.05, -0.25), (-1, 0.05, 0.0), (-1, -0.05, 0.0), (-0.97, -0.05, 0.25), (-0.868, -0.05, 0.5), (-0.7, -0.05, 0.7), (-0.7, 0.05, 0.7), (-0.5, 0.05, 0.868), (-0.25, 0.05, 0.97), (0.0, 0.05, 1), (0.0, -0.05, 1), (0.25, -0.05, 0.97), (0.5, -0.05, 0.868), (0.7, -0.05, 0.7), (0.7, 0.05, 0.7), (0.8678, 0.05, 0.5), (0.97, 0.05, 0.25), (1, 0.05, 0.0), (0.97, 0.05, -0.25), (0.868, 0.05, -0.5), (0.7, 0.05, -0.7), (0.7, -0.05, -0.7), (0.5, -0.05, -0.868), (0.25, -0.05, -0.97), (0.0, -0.05, -1), (0.0, 0.05, -1), (-0.25, 0.05, -0.97), (-0.5, 0.05, -0.868), (-0.7, 0.05, -0.7), (-0.7, -0.05, -0.7), (-0.868, -0.05, -0.5), (-0.97, -0.05, -0.25), (-1, -0.05, 0.0), (-1, 0.05, 0.0), (-0.97, 0.05, 0.25), (-0.868, 0.05, 0.5), (-0.7, 0.05, 0.7), (-0.7, -0.05, 0.7), (-0.5, -0.05, 0.868), (-0.25, -0.05, 0.97), (0.0, -0.05, 1), (0.0, 0.05, 1), (0.25, 0.05, 0.97), (0.5, 0.05, 0.868), (0.7, 0.05, 0.7), (0.7, -0.05, 0.7), (0.868, -0.05, 0.5), (0.97, -0.05, 0.25), (1, -0.05, 0.0) ]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


@final
def cylinderX(*args, **kwargs):
    # cylinder X
    points = [(0.05, -1.0, 0.0), (-0.05, -1.0, 0.0), (-0.05, -0.97, -0.25), (-0.05, -0.868, -0.5), (-0.05, -0.7, -0.7), (0.05, -0.7, -0.7), (0.05, -0.5, -0.868), (0.05, -0.25, -0.97), (0.05, 1.11022302463e-17, -1.0), (-0.05, -1.11022302463e-17, -1.0), (-0.05, 0.25, -0.97), (-0.05, 0.5, -0.868), (-0.05, 0.7, -0.7), (0.05, 0.7, -0.7), (0.05, 0.868, -0.5), (0.05, 0.97, -0.25), (0.05, 1.0, 0.0), (-0.05, 1.0, 0.0), (-0.05, 0.97, 0.25), (-0.05, 0.868, 0.5), (-0.05, 0.7, 0.7), (0.05, 0.7, 0.7), (0.05, 0.5, 0.868), (0.05, 0.25, 0.97), (0.05, 1.11022302463e-17, 1.0), (-0.05, -1.11022302463e-17, 1.0), (-0.05, -0.25, 0.97), (-0.05, -0.5, 0.868), (-0.05, -0.7, 0.7), (0.05, -0.7, 0.7), (0.05, -0.8678, 0.5), (0.05, -0.97, 0.25), (0.05, -1.0, 0.0), (0.05, -0.97, -0.25), (0.05, -0.868, -0.5), (0.05, -0.7, -0.7), (-0.05, -0.7, -0.7), (-0.05, -0.5, -0.868), (-0.05, -0.25, -0.97), (-0.05, -1.11022302463e-17, -1.0), (0.05, 1.11022302463e-17, -1.0), (0.05, 0.25, -0.97), (0.05, 0.5, -0.868), (0.05, 0.7, -0.7), (-0.05, 0.7, -0.7), (-0.05, 0.868, -0.5), (-0.05, 0.97, -0.25), (-0.05, 1.0, 0.0), (0.05, 1.0, 0.0), (0.05, 0.97, 0.25), (0.05, 0.868, 0.5), (0.05, 0.7, 0.7), (-0.05, 0.7, 0.7), (-0.05, 0.5, 0.868), (-0.05, 0.25, 0.97), (-0.05, -1.11022302463e-17, 1.0), (0.05, 1.11022302463e-17, 1.0), (0.05, -0.25, 0.97), (0.05, -0.5, 0.868), (0.05, -0.7, 0.7), (-0.05, -0.7, 0.7), (-0.05, -0.868, 0.5), (-0.05, -0.97, 0.25), (-0.05, -1.0, 0.0) ]
    return pmc.curve(name=kwargs['name'], degree=1, point=points)


"""
sels = pmc.ls(sl=True)[0]
string = '['
for sel in sels:
    pos = sel.getPosition(space='world')
    string += '(' + str(pos[0]) + ', ' + str(pos[1]) +', '+str(pos[2])+'), '
string +=']'
print string

"""